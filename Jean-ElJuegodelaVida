#include <iostream>
#include <conio.h>
#include <windows.h>
#include <ctime>
#include <cstdlib>

using namespace std;

char Block = 219;

void HideCursor() {
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO info;
    info.dwSize = 100;
    info.bVisible = FALSE;
    SetConsoleCursorInfo(consoleHandle, &info);
}

void gotoxy(int x, int y) {
    COORD coord;
    coord.X = x;
    coord.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void setColor(int textColor, int bgColor) {
    int colorAttribute = bgColor << 4 | textColor;
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), colorAttribute);
}

void resetColor() {
    setColor(7, 0);
}

int randnum(int min, int max) {
    return min + rand() % (max - min + 1);
}

void GenerarMatriz(int **Datos, int n, int m) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            Datos[i][j] = (randnum(1, 5) == 1) ? 1 : 0;
        }
    }
}

void ImprimirMatriz(int** Datos, int n, int m) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (Datos[i][j] == 1){
                setColor(7, 15);
                cout << Block;
            }
            else {
                resetColor();
                cout << " ";
            }
        }
        cout << endl;
    }
    resetColor();
}

void ActualizarMatriz(int **Datos, int n, int m) {
    int** NuevaMatriz = new int*[n];
    for (int i = 0; i < n; ++i) {
        NuevaMatriz[i] = new int[m];
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int VecinosVivos = 0;
            for (int k = -1; k <= 1; ++k) {
                for (int l = -1; l <= 1; ++l) {
                    if (k == 0 && l == 0) continue;
                    int ni = i + k;
                    int nj = j + l;
                    if(ni >= 0 && ni < n && nj >= 0 && nj < m)
                    VecinosVivos += Datos[ni][nj];
                }
            }
            if (Datos[i][j] == 1)
                NuevaMatriz[i][j] = (VecinosVivos == 2 || VecinosVivos == 3) ? 1 : 0;
            else
                NuevaMatriz[i][j] = (VecinosVivos == 3) ? 1 : 0;
        }
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            Datos[i][j] = NuevaMatriz[i][j];
        }
        delete[] NuevaMatriz[i];
    }
    delete[] NuevaMatriz;
}

int main() {
    int n, m;
    int i = 0;
    HideCursor();
    do {
        if (i >= 1) cout << "Los valores no han sido admitidos dentro del rango\n";
        cout << "Ingrese el ancho de la matriz (1 - 30): ";
        cin >> n;
        cout << "Ingrese el largo de la matriz (1 - 50): ";
        cin >> m;
        system("cls");
        ++i;
    } while (n < 1 || n > 30 || m <= 0 || m > 50);
    int** Automata = new int*[n];
    for (int i = 0; i < n; ++i) {
        Automata[i] = new int[m];
    }
    i = 0;
    GenerarMatriz(Automata, n, m);
    while (i < 100) {
        cout << "Esta es la iteracion " << i + 1 << endl;
        ImprimirMatriz(Automata, n, m);
        _getch();
        ActualizarMatriz(Automata, n, m);
        ++i;
        system("cls");
    }
    return 0;
}
